name: Run Leaderboard Generation
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 10 * * 0' # 2am PST every Sunday
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --editable .
        pip install requests
        # Make the slim-leaderboard script executable and add to PATH
        chmod +x src/jpl/slim/leaderboard.py
        echo "${GITHUB_WORKSPACE}/src/jpl/slim" >> $GITHUB_PATH
    
    - name: Close existing PRs
      run: |
        # Get all open PRs
        curl -X GET \
          -H "Authorization: token ${{ secrets.TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/pulls?state=open" \
          -o existing_prs.json
        
        # Show response for debugging
        echo "API Response Content (first 500 chars):"
        head -c 500 existing_prs.json
        
        # Parse the JSON and close PRs related to leaderboard updates
        python -c '
        import json
        import requests
        import os
        import sys
        
        # Load existing PRs with better error handling
        try:
            with open("existing_prs.json", "r") as f:
                prs = json.load(f)
            
            # Check if prs is a list as expected
            if not isinstance(prs, list):
                print(f"Expected a list of PRs, but got {type(prs)}")
                print(f"Content preview: {str(prs)[:200]}")
                sys.exit(1)
                
            # Get token from environment
            token = os.environ["GITHUB_TOKEN"]
            repo = os.environ["GITHUB_REPOSITORY"]
            
            # Target prefix for the branch names we want to close
            target_prefix = "update-slim-leaderboards"
            
            # Close each PR that has our target branch prefix
            closed_count = 0
            for pr in prs:
                try:
                    head_ref = pr.get("head", {}).get("ref", "")
                    print(f"Processing PR #{pr.get(\"number\", \"unknown\")} with branch: {head_ref}")
                    
                    if head_ref and head_ref.startswith(target_prefix):
                        pr_number = pr.get("number")
                        if not pr_number:
                            print(f"Could not find PR number in data: {pr}")
                            continue
                            
                        url = f"https://api.github.com/repos/{repo}/pulls/{pr_number}"
                        payload = {"state": "closed"}
                        headers = {
                            "Authorization": f"token {token}",
                            "Accept": "application/vnd.github.v3+json"
                        }
                        print(f"Closing PR #{pr_number} from branch {head_ref}")
                        response = requests.patch(url, json=payload, headers=headers)
                        if response.status_code != 200:
                            print(f"Failed to close PR #{pr_number}: {response.text}")
                        else:
                            print(f"Successfully closed PR #{pr_number}")
                            closed_count += 1
                        
                        # Delete the branch if you want
                        branch_url = f"https://api.github.com/repos/{repo}/git/refs/heads/{head_ref}"
                        delete_response = requests.delete(branch_url, headers=headers)
                        if delete_response.status_code in [204, 200]:
                            print(f"Successfully deleted branch {head_ref}")
                        else:
                            print(f"Failed to delete branch {head_ref}: {delete_response.status_code}")
                except Exception as e:
                    print(f"Error processing PR: {str(e)}")
                    print(f"PR data: {pr}")
            
            print(f"Finished processing. Closed {closed_count} PRs.")
        except Exception as e:
            print(f"Error: {str(e)}")
            import traceback
            traceback.print_exc()
            sys.exit(1)
        '
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
    
    - name: Run script and prepare files
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      run: |
        # First, remove any conflicting files
        rm -f examples/*-leaderboard.md
     
        # Generate new content for all JSON configs
        for config in examples/*.json; do
            # Extract the base name without .json extension
            basename=$(basename "$config" .json)
            # Generate the corresponding leaderboard file
            slim-leaderboard "$config" --output_format MARKDOWN --unsorted --emoji --verbose >> "examples/${basename}-leaderboard.md"
        done
      
        # Set git config
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        # Stage all changes (including deletions and new files)
        git add examples/
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.TOKEN }}
        commit-message: 'Update SLIM leaderboards'
        title: 'üèÜ Auto: Update SLIM Leaderboards'
        body: |
          Automated PR to update SLIM leaderboards
          
          Updates made to:
          - examples/slim-*-leaderboard.md
          
          Generated by GitHub Actions - please review the changes.
        branch: update-slim-leaderboards
        base: main
        delete-branch: true
        labels: |
          automated-pr
          leaderboard-update
